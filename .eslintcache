[{"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\index.js":"1","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\reportWebVitals.js":"2","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\App.js":"3","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\components\\itemsList.js":"4","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\action\\action.js":"5","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\index.js":"6","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\reducer\\index.js":"7","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\reducer\\reducer.js":"8","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\components\\shoppingCart.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":631,"mtime":1607326068788,"results":"13","hashOfConfig":"11"},{"size":6431,"mtime":1607528843032,"results":"14","hashOfConfig":"11"},{"size":399,"mtime":1607421062834,"results":"15","hashOfConfig":"11"},{"size":239,"mtime":1607322524425,"results":"16","hashOfConfig":"11"},{"size":132,"mtime":1607322567364,"results":"17","hashOfConfig":"11"},{"size":901,"mtime":1607420993938,"results":"18","hashOfConfig":"11"},{"size":6618,"mtime":1607528978332,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1drlvlp",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\index.js",[],["43","44"],"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\reportWebVitals.js",[],"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\App.js",[],"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\components\\itemsList.js",["45","46","47"],"import React, { Component } from 'react';\r\nimport Items from '../json/items.json';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { AddToReduxCart, IncrementCounter, putKeyInCheckArray } from '../store/action/action.js';\r\nimport '../css/cartBadge.css';\r\nimport '../css/loading.css';\r\n\r\nclass ItemsList extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            products: Items.items,\r\n            searchText: ''\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ searchText: e.target.value });\r\n    }\r\n\r\n    addItemToCart(i) {\r\n        const { products } = this.state;\r\n\r\n        if (this.props.cartCheck.includes(i)) {\r\n            var cartIndex;\r\n            for (var j = 0; j < this.props.cartItems.length; j++) {\r\n                if (this.props.cartItems[j].id === i) {\r\n                    cartIndex = j;\r\n                }\r\n            }\r\n            this.props.cartItems[cartIndex].total_price = (++this.props.cartItems[cartIndex].quantity) * this.props.cartItems[cartIndex].price;\r\n        } else {\r\n            this.props.checkKey(i);\r\n            var obj = {\r\n                id: i,\r\n                name: products[i].name,\r\n                price: products[i].price,\r\n                imageURL: products[i].imageURL,\r\n                quantity: 1,\r\n                total_price: products[i].price\r\n            }\r\n            this.props.addItem(obj);\r\n        }\r\n\r\n        var value = this.props.counterValue + 1;\r\n        this.props.IncCounter(value);\r\n        toast.configure();\r\n        toast.success(\"Added to Cart !\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 1900,\r\n            hideProgressBar: true,\r\n            pauseOnHover: false,\r\n            draggable: true,\r\n        });\r\n    }\r\n\r\n    hideLoader() {\r\n        var preloader =  document.getElementById(\"loading\");\r\n        preloader.style.display = \"none\";\r\n    }\r\n\r\n    render() {\r\n        const { products } = this.state;\r\n        return (\r\n            <div onLoad={() => this.hideLoader()}>\r\n                <div id=\"loading\"></div>\r\n\r\n                <nav className=\"navbar navbar-expand-lg fixed-top animate__animated animate__zoomInDown\" style={{ textAlign: 'center', float: 'none', display: 'inline-block', backgroundColor: '#007BFF' }}>\r\n                    <Link to=\"/cart\">\r\n                        <button style={{ float: \"right\", backgroundColor: \"transparent\", border: \"none\" }}>\r\n                            <i className=\"fa\" style={{ fontSize: \"34px\" }}>&#xf07a;</i>\r\n                            <span className='badge badge-warning' id='lblCartCount'> {this.props.counterValue} </span>\r\n                        </button>\r\n                    </Link>\r\n                </nav>\r\n\r\n                <br /><br /><br /><br />\r\n\r\n                <div className=\"container\">\r\n\r\n                    <br />\r\n                    <div className=\"row animate__animated animate__lightSpeedInRight\" style={{ textAlign: \"center\" }}>\r\n                        <div className=\"col-sm-1\">\r\n\r\n                        </div>\r\n                        <div className=\"col-sm-9\">\r\n                            <input type=\"text\" placeholder=\"Search Products\" onChange={this.onChange} className=\"form-control\" style={{ margin: '2px' }} ></input>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n\r\n                    <div className=\"row\">\r\n                        {\r\n                            products.map((val, ind) => {\r\n                                const { searchText } = this.state;\r\n\r\n                                if (searchText !== \"\" && val.name.toLowerCase().indexOf(searchText.toLowerCase()) === -1) {\r\n                                    return null;\r\n                                }\r\n\r\n                                return (\r\n                                    <div className=\"card mx-2 my-2 shadow-lg p-3 mb-5 bg-white rounded animate__animated animate__flipInY\" key={ind} style={{ width: '345px', alignItems: 'center' }}>\r\n\r\n                                        {/* src={require('../images/colgate.jpg').default} */}\r\n                                        <img src={val.imageURL} className=\"card-img-top\" style={{ height: '240px', width: '240px' }} alt=\"product image\" />\r\n                                        <div className=\"card-body\" style={{ backgroundColor: '#a6b0bf', width: '100%', textAlign: 'center' }}>\r\n                                            <h5 className=\"card-title\">{val.name}</h5>\r\n                                            <p className=\"card-text\">${val.price}</p>\r\n\r\n                                            {(val.availability == 'In Stock') &&\r\n                                                <div>\r\n                                                    <p className=\"card-text\" style={{ color: \"green\", fontWeight: 'bold' }}>{val.availability}</p>\r\n                                                    <button type=\"button\" onClick={() => this.addItemToCart(ind)} style={{ width: '120px' }} className=\"btn btn-primary\">Add to Cart</button>\r\n                                                </div>}\r\n\r\n                                            {(val.availability == 'Out of Stock') &&\r\n                                                <p className=\"card-text\" style={{ color: \"red\", fontWeight: 'bold' }}>{val.availability}</p>}\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProp(state) {\r\n    return ({\r\n        // jb class me data mangwana hota hy store se\r\n        cartItems: state.root.reduxCart,\r\n        counterValue: state.root.reduxCartCounter,\r\n        cartCheck: state.root.cartChecker\r\n    })\r\n}\r\n\r\nfunction mapDispatchToProp(dispatch) {\r\n    return ({\r\n        // jb class se data store me bhejna hota hai\r\n        addItem: (data) => { dispatch(AddToReduxCart(data)) },\r\n        IncCounter: (i) => { dispatch(IncrementCounter(i)) },\r\n        checkKey: (key) => { dispatch(putKeyInCheckArray(key)) },\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProp, mapDispatchToProp)(ItemsList);","C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\action\\action.js",[],"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\index.js",[],"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\reducer\\index.js",[],"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\store\\reducer\\reducer.js",["48"],"const INITIAL_STATE = {\r\n    reduxCart: [],\r\n    reduxCartCounter: 0,\r\n    cartChecker: []\r\n}\r\n\r\n// Use Case To Check the triggered Function of Action.js and set the triggered function value init respective obeject or variable  \r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'ADDITEM':\r\n            return {\r\n                ...state,\r\n                reduxCart: [action.payload, ...state.reduxCart]\r\n                //reduxCart: [...state.reduxCart , action.payload]\r\n            }\r\n\r\n        case 'ADDITEMKEY':\r\n            return {\r\n                ...state,\r\n                cartChecker: [action.payload, ...state.cartChecker]\r\n            }\r\n\r\n        case 'ADDCOUNTER':\r\n            return ({\r\n                ...state,\r\n                reduxCartCounter: action.payload\r\n            })\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}",["49","50"],"C:\\Users\\EliteBook 8470p\\Desktop\\cart\\reactcart\\src\\components\\shoppingCart.js",["51","52"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { AddToReduxCart, IncrementCounter } from '../store/action/action.js';\r\n\r\nclass ShoppingCart extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            grandTotal: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.calculateGrandTotal();\r\n    }\r\n\r\n\r\n    removeItem(i) {\r\n        var noOfItemsToRemove = this.props.cartItems[i].quantity;\r\n        this.props.cartItems.splice(i, 1);\r\n        this.props.cartCheck.splice(i, 1);\r\n        var value = this.props.counterValue - noOfItemsToRemove;\r\n        this.props.IncCounter(value);\r\n        this.calculateGrandTotal();\r\n        console.log(this.props.cartItems);\r\n        toast.configure();\r\n        toast.success(\"Removed from Cart !\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 1900,\r\n            hideProgressBar: true,\r\n            pauseOnHover: false,\r\n            draggable: true,\r\n        });\r\n    }\r\n\r\n    plusItem(i) {\r\n        this.props.cartItems[i].total_price = (++this.props.cartItems[i].quantity) * this.props.cartItems[i].price;\r\n        var value = this.props.counterValue + 1;\r\n        this.props.IncCounter(value);\r\n        this.calculateGrandTotal();\r\n    }\r\n\r\n\r\n    minusItem(i) {\r\n        if (this.props.cartItems[i].quantity > 1) {\r\n            this.props.cartItems[i].total_price = (--this.props.cartItems[i].quantity) * this.props.cartItems[i].price;\r\n            var value = this.props.counterValue - 1;\r\n            this.props.IncCounter(value);\r\n            this.calculateGrandTotal();\r\n        }\r\n    }\r\n\r\n    calculateGrandTotal() {\r\n        const { grandTotal } = this.state;\r\n\r\n        var gt = 0;\r\n        for (var i = 0; i < this.props.cartItems.length; i++) {\r\n            gt = gt + parseInt(this.props.cartItems[i].total_price);\r\n        }\r\n        this.setState({ grandTotal: gt });\r\n    }\r\n\r\n    render() {\r\n        const { grandTotal } = this.state;\r\n        return (\r\n            <div style={{ textAlign: \"center\" }}>\r\n\r\n                <nav className=\"navbar navbar-expand-lg d-flex justify-content-start animate__animated animate__lightSpeedInRight\" style={{ textAlign: 'center', float: 'none', display: 'inline-block', backgroundColor: '#007BFF' }}>\r\n\r\n                    <Link to=\"/\">\r\n                        <button type=\"button\" className=\"btn btn-success\" style={{ float: \"left\" }}>Go Back</button>\r\n                    </Link>\r\n\r\n                </nav>\r\n\r\n                <br />\r\n                <h2>CART</h2>\r\n                <br />\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-hover\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\" style={{ verticalAlign: 'middle' }}>#</th>\r\n                                    <th scope=\"col\" style={{ verticalAlign: 'middle' }}>Item</th>\r\n                                    <th scope=\"col\" style={{ verticalAlign: 'middle' }}>Name</th>\r\n                                    <th scope=\"col\" style={{ verticalAlign: 'middle' }}>Quantity</th>\r\n                                    <th scope=\"col\" style={{ verticalAlign: 'middle' }}>Unit Price</th>\r\n                                    <th scope=\"col\" style={{ verticalAlign: 'middle' }}>Total Price</th>\r\n                                    <th scope=\"col\"> </th>\r\n                                </tr>\r\n                            </thead>\r\n                            {this.props.cartItems.map((val, ind) => {\r\n                                return (\r\n                                    <tbody key={ind} className=\"animate__animated animate__backInDown\">\r\n                                        <tr>\r\n                                            <th scope=\"row\" style={{ verticalAlign: 'middle' }}>{ind + 1}</th>\r\n                                            <td style={{ verticalAlign: 'middle' }}><img src={val.imageURL} style={{ width: '80px', height: '80px' }} alt=\"product image\" /></td>\r\n                                            <td style={{ verticalAlign: 'middle' }}>{val.name}</td>\r\n                                            <td style={{ verticalAlign: 'middle' }}>\r\n                                                <button type=\"button\" onClick={() => this.minusItem(ind)} style={{ marginRight: '5px', width: '40px' }} className=\"btn btn-light\"><b>-</b></button>\r\n                                                {val.quantity}\r\n                                                <button type=\"button\" onClick={() => this.plusItem(ind)} style={{ marginLeft: '5px', width: '40px' }} className=\"btn btn-light\"><b>+</b></button>\r\n                                            </td>\r\n                                            <td style={{ verticalAlign: 'middle' }}>${val.price}</td>\r\n                                            <td style={{ verticalAlign: 'middle' }}>${val.total_price}</td>\r\n                                            <td style={{ verticalAlign: 'middle' }}><button type=\"button\" onClick={() => this.removeItem(ind)} className=\"btn btn-primary\">Remove</button></td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                );\r\n                            })}\r\n                        </table>\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n                <br /><br /><br />\r\n                <nav className=\"navbar navbar-expand-lg fixed-bottom animate__animated animate__lightSpeedInLeft\" style={{ textAlign: 'center', float: 'none', display: 'inline-block', backgroundColor: '#FFFFFF', borderTop: 'solid 1px black' }}>\r\n                    <h4>Grand Total : ${grandTotal}</h4>\r\n                </nav>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProp(state) {\r\n    return ({\r\n        // jb class me data mangwana hota hy store se\r\n        cartItems: state.root.reduxCart,\r\n        counterValue: state.root.reduxCartCounter,\r\n        cartCheck: state.root.cartChecker\r\n    })\r\n}\r\n\r\nfunction mapDispatchToProp(dispatch) {\r\n    return ({\r\n        // jb class se data store me bhejna hota hai\r\n        addItem: (data) => { dispatch(AddToReduxCart(data)) },\r\n        IncCounter: (i) => { dispatch(IncrementCounter(i)) }\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProp, mapDispatchToProp)(ShoppingCart);",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":109,"column":41,"nodeType":"59","endLine":109,"endColumn":156},{"ruleId":"60","severity":1,"message":"61","line":114,"column":64,"nodeType":"62","messageId":"63","endLine":114,"endColumn":66},{"ruleId":"60","severity":1,"message":"61","line":120,"column":64,"nodeType":"62","messageId":"63","endLine":120,"endColumn":66},{"ruleId":"64","severity":1,"message":"65","line":8,"column":1,"nodeType":"66","endLine":34,"endColumn":2},{"ruleId":"53","replacedBy":"67"},{"ruleId":"55","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":58,"column":17,"nodeType":"71","messageId":"72","endLine":58,"endColumn":27},{"ruleId":"57","severity":1,"message":"58","line":103,"column":85,"nodeType":"59","endLine":103,"endColumn":173},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["73"],["74"],"no-unused-vars","'grandTotal' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]